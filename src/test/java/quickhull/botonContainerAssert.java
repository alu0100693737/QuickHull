package test.java.quickhull;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;

import quickhull.Boton;
import quickhull.botonContainer;

/**
 * {@link botonContainer} specific assertions - Generated by CustomAssertionGenerator.
 */
public class botonContainerAssert extends AbstractAssert<botonContainerAssert, botonContainer> {

	/**
	 * Creates a new </code>{@link botonContainerAssert}</code> to make assertions on actual botonContainer.
	 * @param actual the botonContainer we want to make assertions on.
	 */
	public botonContainerAssert(botonContainer actual) {
		super(actual, botonContainerAssert.class);
	}

	/**
	 * An entry point for botonContainerAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly : <code>assertThat(mybotonContainer)</code> and get specific assertion with code completion.
	 * @param actual the botonContainer we want to make assertions on.
	 * @return a new </code>{@link botonContainerAssert}</code>
	 */
	public static botonContainerAssert assertThat(botonContainer actual) {
		return new botonContainerAssert(actual);
	}

	/**
	 * Verifies that the actual botonContainer's arraybtn contains the given Boton elements.
	 * @param arraybtn the given elements that should be contained in actual botonContainer's arraybtn.
	 * @return this assertion object.
	 * @throws AssertionError if the actual botonContainer's arraybtn does not contain all given Boton elements.
	 */
	public botonContainerAssert hasArraybtn(Boton... arraybtn) {
		// check that actual botonContainer we want to make assertions on is not null.
		isNotNull();

		// check that given Boton varargs is not null.
		if (arraybtn == null)
			throw new AssertionError("Expecting arraybtn parameter not to be null.");

		// check with standard error message (see commented below to set your own message).
		Assertions.assertThat(actual.getArraybtn()).contains(arraybtn);

		// uncomment the 4 lines below if you want to build your own error message :
		// WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
		// String errorMessage = "my error message";
		// assertionInfo.overridingErrorMessage(errorMessage);
		// Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual botonContainer has no arraybtn.
	 * @return this assertion object.
	 * @throws AssertionError if the actual botonContainer's arraybtn is not empty.
	 */
	public botonContainerAssert hasNoArraybtn() {
		// check that actual botonContainer we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected :\n  <%s>\nnot to have arraybtn but had :\n  <%s>", actual,
				actual.getArraybtn());

		// check
		if (!actual.getArraybtn().isEmpty())
			throw new AssertionError(errorMessage);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual botonContainer's color is equal to the given one.
	 * @param color the given color to compare the actual botonContainer's color to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual botonContainer's color is not equal to the given one.
	 */
	public botonContainerAssert hasColor(Boton color) {
		// check that actual botonContainer we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> color to be:\n  <%s>\n but was:\n  <%s>", actual, color,
				actual.getColor());

		// check
		if (!actual.getColor().equals(color)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual botonContainer's ejecutar is equal to the given one.
	 * @param ejecutar the given ejecutar to compare the actual botonContainer's ejecutar to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual botonContainer's ejecutar is not equal to the given one.
	 */
	public botonContainerAssert hasEjecutar(Boton ejecutar) {
		// check that actual botonContainer we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> ejecutar to be:\n  <%s>\n but was:\n  <%s>", actual, ejecutar,
				actual.getEjecutar());

		// check
		if (!actual.getEjecutar().equals(ejecutar)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual botonContainer's iniciar is equal to the given one.
	 * @param iniciar the given iniciar to compare the actual botonContainer's iniciar to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual botonContainer's iniciar is not equal to the given one.
	 */
	public botonContainerAssert hasIniciar(Boton iniciar) {
		// check that actual botonContainer we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> iniciar to be:\n  <%s>\n but was:\n  <%s>", actual, iniciar,
				actual.getIniciar());

		// check
		if (!actual.getIniciar().equals(iniciar)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual botonContainer's paso is equal to the given one.
	 * @param paso the given paso to compare the actual botonContainer's paso to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual botonContainer's paso is not equal to the given one.
	 */
	public botonContainerAssert hasPaso(Boton paso) {
		// check that actual botonContainer we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> paso to be:\n  <%s>\n but was:\n  <%s>", actual, paso,
				actual.getPaso());

		// check
		if (!actual.getPaso().equals(paso)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual botonContainer's pausa is equal to the given one.
	 * @param pausa the given pausa to compare the actual botonContainer's pausa to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual botonContainer's pausa is not equal to the given one.
	 */
	public botonContainerAssert hasPausa(Boton pausa) {
		// check that actual botonContainer we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> pausa to be:\n  <%s>\n but was:\n  <%s>", actual, pausa,
				actual.getPausa());

		// check
		if (!actual.getPausa().equals(pausa)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

}
