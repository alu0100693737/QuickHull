package test.java.quickhull;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;

import quickhull.ModeloQuickhull;
import quickhull.Punto;

/**
 * {@link ModeloQuickhull} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ModeloQuickhullAssert extends AbstractAssert<ModeloQuickhullAssert, ModeloQuickhull> {

	/**
	 * Creates a new </code>{@link ModeloQuickhullAssert}</code> to make assertions on actual ModeloQuickhull.
	 * @param actual the ModeloQuickhull we want to make assertions on.
	 */
	public ModeloQuickhullAssert(ModeloQuickhull actual) {
		super(actual, ModeloQuickhullAssert.class);
	}

	/**
	 * An entry point for ModeloQuickhullAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly : <code>assertThat(myModeloQuickhull)</code> and get specific assertion with code completion.
	 * @param actual the ModeloQuickhull we want to make assertions on.
	 * @return a new </code>{@link ModeloQuickhullAssert}</code>
	 */
	public static ModeloQuickhullAssert assertThat(ModeloQuickhull actual) {
		return new ModeloQuickhullAssert(actual);
	}

	/**
	 * Verifies that the actual ModeloQuickhull's puntosEvaluacion contains the given Punto elements.
	 * @param puntosEvaluacion the given elements that should be contained in actual ModeloQuickhull's puntosEvaluacion.
	 * @return this assertion object.
	 * @throws AssertionError if the actual ModeloQuickhull's puntosEvaluacion does not contain all given Punto elements.
	 */
	public ModeloQuickhullAssert hasPuntosEvaluacion(Punto... puntosEvaluacion) {
		// check that actual ModeloQuickhull we want to make assertions on is not null.
		isNotNull();

		// check that given Punto varargs is not null.
		if (puntosEvaluacion == null)
			throw new AssertionError("Expecting puntosEvaluacion parameter not to be null.");

		// check with standard error message (see commented below to set your own message).
		Assertions.assertThat(actual.getPuntosEvaluacion()).contains(puntosEvaluacion);

		// uncomment the 4 lines below if you want to build your own error message :
		// WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
		// String errorMessage = "my error message";
		// assertionInfo.overridingErrorMessage(errorMessage);
		// Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual ModeloQuickhull has no puntosEvaluacion.
	 * @return this assertion object.
	 * @throws AssertionError if the actual ModeloQuickhull's puntosEvaluacion is not empty.
	 */
	public ModeloQuickhullAssert hasNoPuntosEvaluacion() {
		// check that actual ModeloQuickhull we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected :\n  <%s>\nnot to have puntosEvaluacion but had :\n  <%s>", actual,
				actual.getPuntosEvaluacion());

		// check
		if (!actual.getPuntosEvaluacion().isEmpty())
			throw new AssertionError(errorMessage);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual ModeloQuickhull's puntosSolucion contains the given Punto elements.
	 * @param puntosSolucion the given elements that should be contained in actual ModeloQuickhull's puntosSolucion.
	 * @return this assertion object.
	 * @throws AssertionError if the actual ModeloQuickhull's puntosSolucion does not contain all given Punto elements.
	 */
	public ModeloQuickhullAssert hasPuntosSolucion(Punto... puntosSolucion) {
		// check that actual ModeloQuickhull we want to make assertions on is not null.
		isNotNull();

		// check that given Punto varargs is not null.
		if (puntosSolucion == null)
			throw new AssertionError("Expecting puntosSolucion parameter not to be null.");

		// check with standard error message (see commented below to set your own message).
		Assertions.assertThat(actual.getPuntosSolucion()).contains(puntosSolucion);

		// uncomment the 4 lines below if you want to build your own error message :
		// WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
		// String errorMessage = "my error message";
		// assertionInfo.overridingErrorMessage(errorMessage);
		// Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual ModeloQuickhull has no puntosSolucion.
	 * @return this assertion object.
	 * @throws AssertionError if the actual ModeloQuickhull's puntosSolucion is not empty.
	 */
	public ModeloQuickhullAssert hasNoPuntosSolucion() {
		// check that actual ModeloQuickhull we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected :\n  <%s>\nnot to have puntosSolucion but had :\n  <%s>", actual,
				actual.getPuntosSolucion());

		// check
		if (!actual.getPuntosSolucion().isEmpty())
			throw new AssertionError(errorMessage);

		// return the current assertion for method chaining
		return this;
	}

}
