package test.java.quickhull;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;

import quickhull.Punto;

import java.awt.Point;

/**
 * {@link Punto} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PuntoAssert extends AbstractAssert<PuntoAssert, Punto> {

	/**
	 * Creates a new </code>{@link PuntoAssert}</code> to make assertions on actual Punto.
	 * @param actual the Punto we want to make assertions on.
	 */
	public PuntoAssert(Punto actual) {
		super(actual, PuntoAssert.class);
	}

	/**
	 * An entry point for PuntoAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly : <code>assertThat(myPunto)</code> and get specific assertion with code completion.
	 * @param actual the Punto we want to make assertions on.
	 * @return a new </code>{@link PuntoAssert}</code>
	 */
	public static PuntoAssert assertThat(Punto actual) {
		return new PuntoAssert(actual);
	}

	/**
	 * Verifies that the actual Punto's punto is equal to the given one.
	 * @param punto the given punto to compare the actual Punto's punto to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Punto's punto is not equal to the given one.
	 */
	public PuntoAssert hasPunto(Point punto) {
		// check that actual Punto we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> punto to be:\n  <%s>\n but was:\n  <%s>", actual, punto,
				actual.getPunto());

		// check
		if (!actual.getPunto().equals(punto)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Punto's radio is equal to the given one.
	 * @param radio the given radio to compare the actual Punto's radio to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Punto's radio is not equal to the given one.
	 */
	public PuntoAssert hasRadio(int radio) {
		// check that actual Punto we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> radio to be:\n  <%s>\n but was:\n  <%s>", actual, radio,
				actual.getRadio());

		// check
		if (actual.getRadio() != radio) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

}
