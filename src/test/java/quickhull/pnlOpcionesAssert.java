package test.java.quickhull;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;

import quickhull.botonContainer;
import quickhull.pnlOpciones;

import javax.swing.JLabel;
import javax.swing.JTextField;

/**
 * {@link pnlOpciones} specific assertions - Generated by CustomAssertionGenerator.
 */
public class pnlOpcionesAssert extends AbstractAssert<pnlOpcionesAssert, pnlOpciones> {

	/**
	 * Creates a new </code>{@link pnlOpcionesAssert}</code> to make assertions on actual pnlOpciones.
	 * @param actual the pnlOpciones we want to make assertions on.
	 */
	public pnlOpcionesAssert(pnlOpciones actual) {
		super(actual, pnlOpcionesAssert.class);
	}

	/**
	 * An entry point for pnlOpcionesAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly : <code>assertThat(mypnlOpciones)</code> and get specific assertion with code completion.
	 * @param actual the pnlOpciones we want to make assertions on.
	 * @return a new </code>{@link pnlOpcionesAssert}</code>
	 */
	public static pnlOpcionesAssert assertThat(pnlOpciones actual) {
		return new pnlOpcionesAssert(actual);
	}

	/**
	 * Verifies that the actual pnlOpciones's arrayButones is equal to the given one.
	 * @param arrayButones the given arrayButones to compare the actual pnlOpciones's arrayButones to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual pnlOpciones's arrayButones is not equal to the given one.
	 */
	public pnlOpcionesAssert hasArrayButones(botonContainer arrayButones) {
		// check that actual pnlOpciones we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> arrayButones to be:\n  <%s>\n but was:\n  <%s>", actual, arrayButones,
				actual.getArrayButones());

		// check
		if (!actual.getArrayButones().equals(arrayButones)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual pnlOpciones's cambiarNum is equal to the given one.
	 * @param cambiarNum the given cambiarNum to compare the actual pnlOpciones's cambiarNum to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual pnlOpciones's cambiarNum is not equal to the given one.
	 */
	public pnlOpcionesAssert hasCambiarNum(JTextField cambiarNum) {
		// check that actual pnlOpciones we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> cambiarNum to be:\n  <%s>\n but was:\n  <%s>", actual, cambiarNum,
				actual.getCambiarNum());

		// check
		if (!actual.getCambiarNum().equals(cambiarNum)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual pnlOpciones's etiqueta is equal to the given one.
	 * @param etiqueta the given etiqueta to compare the actual pnlOpciones's etiqueta to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual pnlOpciones's etiqueta is not equal to the given one.
	 */
	public pnlOpcionesAssert hasEtiqueta(JLabel etiqueta) {
		// check that actual pnlOpciones we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> etiqueta to be:\n  <%s>\n but was:\n  <%s>", actual, etiqueta,
				actual.getEtiqueta());

		// check
		if (!actual.getEtiqueta().equals(etiqueta)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

}
